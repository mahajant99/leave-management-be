plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.flywaydb.flyway" version "10.8.1"
    id "jacoco"
    id "name.remal.sonarlint" version "3.4.9"
}

group = 'com.technogise'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.postgresql:postgresql:42.2.5'
	implementation 'org.flywaydb:flyway-core:10.8.1'
	implementation "org.flywaydb:flyway-database-postgresql:10.8.1"
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.google.oauth-client:google-oauth-client:1.30.4'
    implementation 'com.google.apis:google-api-services-calendar:v3-rev260-1.23.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
    implementation 'com.google.http-client:google-http-client-jackson2:1.23.0'
    implementation 'com.google.api-client:google-api-client:2.4.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    implementation 'org.springframework.boot:spring-boot-starter-security'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "*/*/*/dtos/**",
                "*/*/*/entities/**",
                "*/*/*/LeaveManagementApplication.class",
            ])
        }))
    }
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('jacocoReportDir')
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "*/*/*/dtos/**",
                "*/*/*/entities/**",
                "*/*/*/LeaveManagementApplication.class",
            ])
        }))
    }

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.80
            }
        }
    }
}

sonarLint {
    isGeneratedCodeIgnored = false

    rules {
        disable(
                'java:S6813',
                'java:S5786',
                'java:S2293'
        )
    }

    languages {
        include('java')
    }

    ignoredPaths.add('**/LeaveManagementApplication.java')
    ignoredPaths.add('**/LeaveManagementApplicationTests.java')
}